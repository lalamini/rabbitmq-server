load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load("@rules_erlang//:app_file2.bzl", "app_file")
load("@rules_erlang//:erlang_app_info.bzl", "erlang_app_info")
load("@rules_erlang//:escript.bzl", "escript_archive")
load(":rabbitmqctl.bzl", "rabbitmqctl")
load(":rabbitmqctl_check_formatted.bzl", "rabbitmqctl_check_formatted_test")
load(":rabbitmqctl_compile_warnings_as_errors.bzl", "rabbitmqctl_compile_warnings_as_errors_test")
load(":rabbitmqctl_test.bzl", "rabbitmqctl_test")
load("//:rabbitmq_home.bzl", "rabbitmq_home")
load("//:rabbitmq_run.bzl", "rabbitmq_run")
load("//:rabbitmq.bzl", "APP_VERSION", "RABBITMQ_DIALYZER_OPTS", "STARTS_BACKGROUND_BROKER_TAG", "without")
load(
    "@rabbitmq-server//bazel/elixir:mix_archive_build.bzl",
    "mix_archive_build",
)
load(
    "@rabbitmq-server//bazel/elixir:elixir_bytecode.bzl",
    "elixir_bytecode",
)

# load(
#     "@rabbitmq-server//bazel/elixir:elixir_ebin_dir.bzl",
#     "elixir_ebin_dir",
# )
load(
    "@rabbitmq-server//bazel/elixir:erlang_app_filter_module_conflicts.bzl",
    "erlang_app_filter_module_conflicts",
)
load(
    "@rabbitmq-server//bazel/elixir:elixir_escript_main.bzl",
    "elixir_escript_main",
)

mix_archive_build(
    name = "csv_ez",
    srcs = ["@csv//:sources"],
    out = "csv.ez",
    archives = ["@hex//:archive"],
)

mix_archive_build(
    name = "json_ez",
    srcs = ["@json//:sources"],
    out = "json.ez",
    archives = ["@hex//:archive"],
)

APP_NAME = "rabbitmqctl"

EXTRA_APPS = [
    "elixir",
    "logger",
]

SRCS = glob([
    "lib/**/*.ex",
])

DEPS = [
    "//deps/rabbit_common:erlang_app",
    "@observer_cli//:erlang_app",
    "@stdout_formatter//:erlang_app",
]

elixir_bytecode(
    name = "beam_files",
    srcs = SRCS,
    dest = "beam_files",
    elixirc_opts = [
        "-e ':application.ensure_all_started(:mix)'",
    ],
    env = {
        "HOME": '"$(mktemp -d)"',
        "MIX_ENV": "prod",
    },
    ez_deps = [
        ":csv.ez",
        ":json.ez",
    ],
    deps = DEPS,
)

app_file(
    name = "app_file",
    out = "rabbitmqctl.app",
    app_description = APP_NAME,
    app_env = """[{scopes,[{'rabbitmq-plugins',plugins},
                             {rabbitmqctl,ctl},
                             {'rabbitmq-diagnostics',diagnostics},
                             {'rabbitmq-queues',queues},
                             {'rabbitmq-streams',streams},
                             {'rabbitmq-upgrade',upgrade},
                             {'vmware-rabbitmq',vmware}]}]""",
    app_name = APP_NAME,
    app_version = APP_VERSION,
    extra_apps = EXTRA_APPS,
    modules = [":beam_files"],
)

# elixir_ebin_dir(
#     name = "ebin",
#     beam_files_dir = ":beam_files",
#     app_file = ":app_file",
#     dest = "ebin",
# )

# need to have a rule to produce elixir as an ErlangAppInfo, without
# the conflicts from the :beam_files

# then that elixir can be part of the deps of this erlang app
# then we have to make the escript, then we can remove the rabbitmqctl rule
erlang_app_filter_module_conflicts(
    name = "elixir2",
    src = "//bazel/elixir:erlang_app",
    without = [":beam_files"],
)

erlang_app_info(
    name = "erlang_app2",
    srcs = SRCS,
    hdrs = [],
    app = ":app_file",
    app_name = APP_NAME,
    beam = [":beam_files"],
    extra_apps = EXTRA_APPS,
    license_files = glob(["LICENSE*"]),
    priv = [],
    visibility = ["//visibility:public"],
    deps = [
        ":elixir2",
        "//bazel/elixir:logger",
    ] + DEPS,
)

elixir_escript_main(
    name = "escript_main",
    out = "rabbitmqctl_escript.beam",
    app = APP_NAME,
    main_module = "RabbitMQCtl",
    mix_config = "config/config.exs",
)

escript_archive(
    name = "rabbitmqctl2",
    app = ":erlang_app2",
    beam = [":escript_main"],
    drop_hrl = True,  # no-op for now
    flat = True,  # no-op for now
    headers = [
        "shebang",
        '{emu_args, "-escript main rabbitmqctl_escript -hidden"}',
    ],
    visibility = ["//visibility:public"],
)

# Note: All the various rabbitmq-* scripts are just copies of rabbitmqctl
rabbitmqctl(
    name = "rabbitmqctl",
    srcs = [
        "config/config.exs",
        "mix.exs",
    ] + glob([
        "lib/**/*.ex",
    ]),
    archives = [
        "@hex//:archive",
    ],
    license_files = glob(["LICENSE*"]),
    source_deps = {
        "@csv//:sources": "csv",
        "@json//:sources": "json",
    },
    visibility = ["//visibility:public"],
    deps = [
        "//deps/rabbit_common:erlang_app",
        "@observer_cli//:erlang_app",
        "@stdout_formatter//:erlang_app",
    ],
)

rabbitmq_home(
    name = "broker-for-cli-tests-home",
    testonly = True,
    plugins = [
        "//deps/rabbit:erlang_app",
        "//deps/rabbitmq_federation:erlang_app",
        "//deps/rabbitmq_stomp:erlang_app",
        "//deps/rabbitmq_stream_management:erlang_app",
        "//deps/amqp_client:erlang_app",
    ],
)

rabbitmq_run(
    name = "rabbitmq-for-cli-tests-run",
    testonly = True,
    home = ":broker-for-cli-tests-home",
    visibility = ["//visibility:public"],
)

rabbitmqctl_check_formatted_test(
    name = "check_formatted",
    size = "small",
    srcs = [
        ".formatter.exs",
        "config/config.exs",
        "mix.exs",
    ] + glob([
        "lib/**/*.ex",
        "test/**/*.exs",
    ]),
    data = glob(["test/fixtures/**/*"]),
    target_compatible_with = select({
        "@platforms//os:macos": [
            "@platforms//os:macos",
            "@elixir_config//:elixir_1_15",
        ],
        "//conditions:default": [
            "@platforms//os:linux",
            "@elixir_config//:elixir_1_15",
        ],
    }),
)

test_suite(
    name = "rabbitmqctl_check_formatted",
    tests = ["check_formatted"],
)

rabbitmqctl_compile_warnings_as_errors_test(
    name = "compile_warnings_as_errors",
    size = "small",
    srcs = [
        ".formatter.exs",
        "config/config.exs",
        "mix.exs",
    ] + glob([
        "lib/**/*.ex",
        "test/**/*.exs",
    ]),
    archives = [
        "@hex//:archive",
    ],
    data = glob(["test/fixtures/**/*"]),
    source_deps = {
        "@amqp//:sources": "amqp",
        "@csv//:sources": "csv",
        "@json//:sources": "json",
        "@temp//:sources": "temp",
        "@x509//:sources": "x509",
    },
    target_compatible_with = select({
        "@platforms//os:macos": [
            "@platforms//os:macos",
            "@elixir_config//:elixir_1_15",
        ],
        "//conditions:default": [
            "@platforms//os:linux",
            "@elixir_config//:elixir_1_15",
        ],
    }),
    deps = [
        "//deps/amqp_client:erlang_app",
        "//deps/rabbit:erlang_app",
        "//deps/rabbit_common:erlang_app",
        "@observer_cli//:erlang_app",
        "@stdout_formatter//:erlang_app",
    ],
)

test_suite(
    name = "rabbitmqctl_compile_warnings_as_errors",
    tests = ["compile_warnings_as_errors"],
)

plt(
    name = "deps_plt",
    apps = [
        "kernel",
        "stdlib",
        "erts",
        "mnesia",
        "public_key",
        "runtime_tools",
    ],
    ez_deps = [
        ":csv_ez",
        ":json_ez",
    ],
    ignore_warnings = True,
    libs = [":elixir"],
    deps = [
        ":elixir",
        "//bazel/elixir:logger",
        "//deps/rabbit:erlang_app",
        "//deps/rabbit_common:erlang_app",
    ],
)

dialyze(
    dialyzer_opts = without(
        # Some Elixir.CSV, Elixir.JSON and Elixir.Logger functions are unknown
        "-Wunknown",
        RABBITMQ_DIALYZER_OPTS,
    ),
    libs = [":elixir"],
    plt = ":deps_plt",
)

rabbitmqctl_test(
    name = "tests",
    size = "large",
    srcs = [
        ".formatter.exs",
        "config/config.exs",
        "mix.exs",
    ] + glob([
        "lib/**/*.ex",
        "test/**/*.exs",
    ]),
    archives = [
        "@hex//:archive",
    ],
    data = glob(["test/fixtures/**/*"]),
    flaky = True,
    rabbitmq_run = ":rabbitmq-for-cli-tests-run",
    source_deps = {
        "@amqp//:sources": "amqp",
        "@csv//:sources": "csv",
        "@json//:sources": "json",
        "@temp//:sources": "temp",
        "@x509//:sources": "x509",
    },
    tags = [STARTS_BACKGROUND_BROKER_TAG],
    deps = [
        "//deps/amqp_client:erlang_app",
        "//deps/rabbit:erlang_app",
        "//deps/rabbit_common:erlang_app",
        "@observer_cli//:erlang_app",
        "@stdout_formatter//:erlang_app",
    ],
)

test_suite(
    name = "rabbitmqctl_tests",
    tests = ["tests"],
)
